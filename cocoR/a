COMPILER C



/////////////////////////////////
// add by jackie juju
#include "clib.h"
#include <string.h>
#include <vector>
#include <string>
#include "datatype.h"
#include "LoopTree.h"
#include "opcode.h"
#include "os/CSS_LOCKEX.h"
#include "ScriptFuncTable.h"
#include "log.h"
#include "PubFuncTable.h"
#include "ClassDes.h"
#include "compiler.h"
#include "utility.h"

#define CAST Cast(op1, type1, dt1, op2, type2, dt2);


// add by jackie juju
/////////////////////////////////

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  tab      = CHR(9) .
  eol      = CHR(10) .
  files    = letter + digit + ":\." .
  chars    = CHR(32) .. CHR(255) - "'" .
  strings  = CHR(32) .. CHR(255) - '"'.
  macros   = ANY - eol .

COMMENTS FROM ""
COMMENTS FROM "//" TO eol

IGNORE
  tab + eol + CHR(13)

TOKENS
  identifier = ( "_" | letter) { "_" | letter | digit } .
  number     = digit { digit } [ "." { digit }] [ "U" | "u" | "L" | "l" ] .
  hexnumber  = "0" ( "x" | "X" ) hexdigit { hexdigit } [ "U" | "u" | "L" | "l" ] .
  string1     = '"' { strings } '"' .
  char1       = "'" [ "\\" ] chars "'" .
  library    = "<" files { files } ">" .

PRAGMAS

  PreProcessor = "#" ( letter ) .
		    





PRODUCTIONS

    C                    =      
   { Import | LoadLib } [ Inheritance ]

    { Definition } EOF .

  Import = "use" ClassFullName<szName>
  ";" .
  
  LoadLib = "load" identifier 
  
   ";" .
  

	
 
  Definition           =
   (
   [ StorageClass ]  
   [ Type<type> ]
   
   
   identifier

(
   (
		FunctionDefinition 
	   
	)
	|
	( 
	   ("=" Expression ";")
	   | ";"  
    ) 
   )
   ) 
   
   | ClassDef  .
                            
  
  
  Inheritance              = "inherit" identifier 
   ";" .
  

	ClassDef			= "class" identifier  

ClassBody	";" .
	ClassBody			 = 
	

	"{" { Definition} "}" 
	
	
	.


  StorageClass         = 
   "static" 
   | "my" 
   | "function"
   .

  Type<PTYPEDES type>                 = 


( "var" | "mixed" )

	|
	 "short" [ "int" ]

    | "long"  [ "int" | "float" ]
 
	| "unsigned" [ "char" | "int" | "long" ]
	| "char"

	| "int" 
	
	| "float"		


	| "double" | "void"  | "string"

	.

  VarList<PTYPEDES type, char* szFirstName>   = 
  ArraySize
    [ "=" Expression ] 
{ ","  identifier


ArraySize

 [  "=" Expression ] 
  } .

  ArraySize            = { "[" [ ConstExpression ] "]" } .



  FunctionDefinition   = 
  
  FunctionHeader FunctionBody  
  
  .
  FunctionHeader       = 
  


							"(" [ FormalParamList ] ")" 
  .
  FunctionBody         = CompoundStatement   .
  FormalParamList      = FormalParameter { "," FormalParameter } .
  FormalParameter      = 
  Type<type> {  "*" 		

  }  identifier  
  
  ArraySize 
  
  .



  Statement            = { Label }
                         ( 
                         
						 AssignmentStatement | BreakStatement
                           | ContinueStatement
                           | DoStatement | ForStatement
                           | IfStatement  | NullStatement
                           | ReturnStatement | SwitchStatement
                           | WhileStatement ) 
 .

  Label                = ("case" ConstExpression ":")  | ( "default" ":") .



  AssignmentStatement = Expression ";" .

  BreakStatement       = "break" ";" 
  
 .
 LocalDeclaration     = 
							
 ( Type<type> |  StorageClass  [Type<type>] )
  
							
 
  
  identifier				
 VarList<type, szName>";"  
 . 
  CompoundStatement    = "{" { LocalDeclaration | Statement } "}" .

  ContinueStatement    = "continue" ";" 
  
  .

  DoStatement          = "do" Statement "while" "(" Expression ")" ";" .

  ForStatement         = "for"  "(" [ Expression ] ";" 
  
  
  [ Expression ] 
  
  ";" 
  
  [ 

	Expression 

  ] ")" Statement
   .

  IfStatement          = "if" "(" Expression ")" 
  
  Statement   [
 
   "else" 
  
  Statement
  
   ]
   
 .

  NullStatement        = ";" .

  ReturnStatement      = "return" [ Expression ] 
  
  ";" .
                         

  SwitchStatement      = "switch" "("

   Expression 

   
   ")" Statement 

	.

  WhileStatement       = "while" "(" 
    
	Expression 
	   
   ")" Statement 
   
     .







  ConstExpression      = Expression .

  Expression           = Conditional { AssignmentOperator Expression
  
   }.

  Conditional          = LogORExp .

  LogORExp             = LogANDExp   { "||"
  
  
LogANDExp 

} 


.

  LogANDExp            =
 

InclORExp   { "&&" 



InclORExp 


}

.

  InclORExp            = ExclORExp   { "|" ExclORExp } .

  ExclORExp            = ANDExp      { "^" ANDExp } .

  ANDExp               = EqualExp    { "&" EqualExp } .

  EqualExp             = 
  

  RelationExp { ( "=="
   
| "!="
 ) RelationExp 


} 


.

  RelationExp          = 
  
  ShiftExp    { ( "<"  | ">" | "<=" | ">=" ) 
  ShiftExp
  
   }
  
  
  
  .

  ShiftExp             = AddExp      { ( "<<" | ">>" ) AddExp } .

  AddExp               = 
MultExp     { ( "+"  | "-"  ) MultExp 



} .

  MultExp              = 
  CastExp  
 { ( "*"   | "/"   | "%"   ) CastExp 

} .

  CastExp              = 
  
  UnaryExp 
  
  
  .



  UnaryExp             = PostFixExp
                         | ( "++" | "--" ) UnaryExp
                         | UnaryOperator CastExp .



  PostFixExp           = Primary
                         { "[" Expression "]"

                          | 
FunctionCall<&fn>

                          | ("." identifier)  
                          
                          
                          
                          
                          | (  "->" {"{"} identifier {"}"} 

			)			  
		
						  
						  | identifier        
						  
                          | "++"


                          | "--"

						  
                         } .
                         
 HashItem  = (string1 | identifier) ":" Expression . 
 SetItem = HashItem | Expression .
  SetItems = SetItem { "," SetItem } .  
  SetDef = "{"  [ SetItems ] "}" .
  
  Creator = 
  
  ClassFullName<szName> {"(" {FormalParamList} ")"} 
  
   .
  
  ClassFullName<char* szName> = 
  identifier  
  {"::" 
   identifier 
   }  .
  
  Primary              = 

 identifier 
  | "new" Creator
  
  
  | string1
  | char1
  
  | number 
 
  | "(" Expression ")" 
  | SetDef
  .

  FunctionCall<FUNCCALL* pFuncEntry>         = "("  
 


 [ ActualParameters<pFuncEntry> ] ")" 
  .

  ActualParameters<FUNCCALL* pFuncEntry>     = 
  Expression 
  
  { "," Expression 
  
  
  } 
  
  .

  AssignmentOperator   =   "="  | "*=" | "/=" | "%=" | "+=" | "-=" | "&="
                         | "^=" | "|=" | "<<=" | ">>=" .

  UnaryOperator        = "+" | "-" | "*" | "!" | "&" | "~" .

END C.




