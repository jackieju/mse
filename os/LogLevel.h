
#ifndef	__OS_LOG_LEVEL_H__
#define	__OS_LOG_LEVEL_H__

// Fatal error - errors that may cause application broken down.
//      Like service initial parameter error, memory allocation error, etc.
#define	OS_LOG_FATAL		1

// System information - very important informations, but NOT ERROR.
//      Like service startup/shutdown, thread begin/end, etc.
#define	OS_LOG_SYSTEM		5

// Normal error - errors that may cause current transaction failed, but not
//      influence the application's stability.
//      Like open file failed, input parameter error, etc.
#define OS_LOG_ERROR		10

// Warning - not error, but may cause some error occur or system unstable.
//      Usually, this kind of log maybe generated by the application
//      internal action, not user's input.
//      Like application's memory exceed the limitation, user's input value
//      is error so use default value, etc.
#define	OS_LOG_WARNING		50

// Debug information - informations only for debug.
#define	OS_LOG_DEBUG		100

/** 
* <pre>
* Set log level name. Because some log levels haven't formal name. Some applications need to
* define their own log level names. But, those special log level name shouldn't be modified.
* Such as, OS_LOG_FATAL, OS_LOG_SYSTEM, OS_LOG_ERROR, OS_LOG_WARNING, OS_LOG_DEBUG. And, the
* length of sLogLevelName should be LESS than 20
*
* Parameters:
*				nLogLevel, log level value
*				sLogLevelName, log level name you want
* Return values:
*				None
* </pre>
*/
OSLIB_DLL_FUNC_HEAD void OSLOG_SetLogLevelName(int nLogLevel, char * sLogLevelName);

/** 
* <pre>
* Get log level name.
*
* Parameters:
*				nLogLevel, log level value
* Return values:
*				the log level name
* </pre>
*/
OSLIB_DLL_FUNC_HEAD char *OSLOG_GetLogLevelName(int nLogLevel);

#endif
